{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React functional component": {
		"prefix": "rfc",
		"body": [
			"import React from 'react';",
			"",
			"const $1 = () => ($2);",
			"",
			"export default $1;",
			"",
		],
		"description": "Create a react functional component"
	},
	"React functional component with block body": {
		"prefix": "rfcb",
		"body": [
			"import React from 'react';",
			"",
			"const $1 = () => {",
			"\t$2",
			"};",
			"",
			"export default $1;",
			"",
		],
		"description": "Create a react functional component"
	},
	"Test describe block": {
		"prefix": "describe",
		"body": [
			"describe('$1', () => {",
			"\t$2",
			"});",
		]
	},
	"Test it block": {
		"prefix": "it",
		"body": [
			"it('$1', () => {",
			"\t$2",
			"});",
		]
	},
	"useState": {
    "prefix": "usestate",
    "body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
    ],
    "description": "React useState() hook"
	},
	"useEffect": {
		"prefix": "useeffect",
		"body": [
			"useEffect(() => {",
				"\t$1",
			"}, [$2]);$0"
		],
		"description": "React useEffect() hook"
	},
	"useContext": {
		"prefix": "usecontext",
		"body": [
			"const $1 = useContext($2);$0"
		],
		"description": "React useContext() hook"
	},
	"useCallback": {
		"prefix": "usecallback",
		"body": [
			"const $1 = useCallback(() => {",
				"\t$2",
			"}, [$3]);$0"
		],
		"description": "React useCallback() hook"
	},
	"useMemo": {
		"prefix": "usememo",
		"body": [
			"const $1 = useMemo(() => $2, [$3]);$0"
		],
		"description": "React useMemo() hook"
	},
	"useRef": {
	"prefix": "useref",
	"body": [
		"const $1 = useRef($2)$0"
    ],
    "description": "React useRef() hook"
},
	"useReducer": {
    "prefix": "urdh",
    "body": [
        "const [${1:state},${2: dispatch}] = useReducer(state, action);",

            "\n\treturn (",
            "\t\t",
            "\t);"

        ],
        "description": "React useReducer() hook"
	},
}
