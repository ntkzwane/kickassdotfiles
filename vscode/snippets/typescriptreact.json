{
	"React functional component": {
		"prefix": "rfc",
		"body": [
			"import React from 'react';",
			"",
			"const $1 = () => ($2);",
			"",
			"export default $1;",
			""
		],
		"description": "Create a react functional component"
	},
	"React functional component with block body": {
		"prefix": "rfcb",
		"body": [
			"import React from 'react';",
			"",
			"const $1 = () => {",
			"\t$2",
			"};",
			"",
			"export default $1;",
			""
		],
		"description": "Create a react functional component"
	},
	"Test describe block": {
		"prefix": "describe",
		"body": [
			"describe('$1', () => {",
			"\t$2",
			"});"
		]
	},
	"Test it block": {
		"prefix": "it",
		"body": [
			"it('$1', () => {",
			"\t$2",
			"});"
		]
	},
	"Test test block": {
		"prefix": "test",
		"body": [
			"test('$1', () => {",
			"\t$2",
			"});"
		]
	},
	"useState": {
		"prefix": "usestate",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
		],
		"description": "React useState() hook"
	},
	"useEffect": {
		"prefix": "useeffect",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"}, [$2]);$0"
		],
		"description": "React useEffect() hook"
	},
	"useContext": {
		"prefix": "usecontext",
		"body": [
			"const $1 = useContext($2);$0"
		],
		"description": "React useContext() hook"
	},
	"useCallback": {
		"prefix": "usecallback",
		"body": [
			"const $1 = useCallback(() => {",
			"\t$2",
			"}, [$3]);$0"
		],
		"description": "React useCallback() hook"
	},
	"useMemo": {
		"prefix": "usememo",
		"body": [
			"const $1 = useMemo(() => $2, [$3]);$0"
		],
		"description": "React useMemo() hook"
	},
	"useRef": {
		"prefix": "useref",
		"body": [
			"const $1 = useRef($2)$0"
		],
		"description": "React useRef() hook"
	},
	"useReducer": {
		"prefix": "urdh",
		"body": [
			"const [${1:state},${2: dispatch}] = useReducer(state, action);",
			"\n\treturn (",
			"\t\t",
			"\t);"
		],
		"description": "React useReducer() hook"
	},
	"Await on Promise": {
		"prefix": "awaiton",
		"body": [
			"const [$1Error, $1] = await on($2);"
		]
	}
}