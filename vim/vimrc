"---------------------------------------------------------------
""           General Settings
"---------------------------------------------------------------
set shell=/bin/zsh

set encoding=utf-8
"set showcmd							  																		" display incomplete commands
syntax enable
filetype plugin on

"" Spacing
set nowrap                          														" don't wrap lines
set tabstop=2 shiftwidth=2          														" a tab is two spaces (or set this to 4)
set backspace=indent,eol,start      														" backspace through everything in insert mode
set expandtab                       " use spaces, not tabs (optional)

"" Navigation
" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline
set mouse=a																											" Enable use of the mouse for all modes
setlocal foldmethod=syntax                                      " Enable code folding

"" Display
set number 																											" Display line numbers on the left
set ruler 																											" Display the cursor position on the last line of the screen or in the status line of a window
set laststatus=2																								" Always display the status line, even if only one window is displayed
set cmdheight=2																									" Set the command window height to 2 lines, to avoid many cases of having to 'press <Enter> to continue'

"" Searching
set hlsearch                            												" highlight matches
set incsearch                           												" incremental searching
set ignorecase                          												" searches are case insensitive...
set smartcase                           												" ... unless they contain at least one capital letter
nnoremap <silent> <C-a> :nohl<CR><C-l>  " <Ctrl-a> redraws the screen and removes any search highlighting.

"" Use system clipboard
set clipboard=unnamedplus

"---------------------------------------------------------------
""           Plugins
"---------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" Color schemes
Plug 'joshdick/onedark.vim'                                     " onedark
"Plug 'NLKNguyen/papercolor-theme'                              " PaperColor
"Plug 'gosukiwi/vim-atom-dark'

" Aesthetics
Plug 'vim-airline/vim-airline'                                  " A cooler status bar at the bottom
Plug 'vim-airline/vim-airline-themes'                           " A cooler status bar at the bottom
Plug 'airblade/vim-gitgutter'                                   " Show git changes in the gutter
Plug 'kien/rainbow_parentheses.vim'                             " Colourful parentheses
Plug 'ntpeters/vim-better-whitespace'                           " Highlight trailing whitespace
Plug 'valloric/MatchTagAlways'                                  " Highlight matching tags
Plug 'sheerun/vim-polyglot'                                     " Language support
Plug 'suan/vim-instant-markdown'                                " Instant markdown in the browser (also install global npm package)
Plug 'tomtom/tcomment_vim'                                      " Easier commenting
Plug 'gorodinskiy/vim-coloresque'                               " A css/less/sass/html color preview
Plug 'scrooloose/syntastic'                                     " Syntax checking for various languages
Plug 'tpope/vim-eunuch'                                         " Vim sugar for the UNIX shell commands that need it the most

" General
Plug 'ctrlpvim/ctrlp.vim'             " Fuzzy file searching
Plug 'Shougo/vimproc', {'do' : 'make'} | Plug 'Quramy/tsuquyomi' " Tsuquyomi (typescript plugin) depends on vimproc
Plug 'scrooloose/nerdtree'                                      " View directory as a sidebar
Plug 'jistr/vim-nerdtree-tabs'                                  " Making NERDTree better
Plug 'Xuyuanp/nerdtree-git-plugin'                              " Making NERDTree play with GIT

"Plug 'Valloric/YouCompleteMe'                                     " Autocomplete
" autocmd! User YouCompleteMe if !has('vim_starting') | call youcompleteme#Enable() | endif
call plug#end()

"---------------------------------------------------------------
""           Plugin Configuration
"---------------------------------------------------------------
""" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'                            " Default local working directory
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }                                                         " <CR> (enter) to open file in new tab instead of <c-t>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip                        " Linux/MacOSX
set wildignore+=*/node_modules/*,*/platforms/*,*/plugins/*      " Library/dependency directories
set wildignore+=*/.idea/*                                       " IDEs/TextEditors

""" onedark
let g:onedark_termcolors=256

""" Tsuquyomi
set ballooneval                                                " show tooltip
autocmd FileType typescript nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>
let g:tsuquyomi_disable_default_mappings = 1                   " disable default tsuquyomi keymappins

"" YouCompleteMe
"let g:ycm_add_preview_to_completeopt=0
"let g:ycm_register_as_syntastic_checker = 0
"let g:ycm_confirm_extra_conf=0
"set completeopt-=preview

""" NERDTree
"autocmd vimenter * NERDTree                                     " show NERDTree on vim startup
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

""" gitNERDTree
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "~",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"" Syntastic
let g:syntastic_ruby_checkers = ['rubocop']                     " Use MRI and Rubocop checkers for Ruby files
let g:syntastic_javascript_checkers = ['eslint']                " Use eslint for Javascript files

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": [],
        \ "passive_filetypes": ["ruby", "javascript", "typescript"] }

" nnoremap <leader>z :SyntasticCheck<CR>
" nnoremap <leader>c :SyntasticReset<CR>                          " Scan file again for syntax erors

"---------------------------------------------------------------
""             Display
"---------------------------------------------------------------

" set background=dark
colorscheme onedark

