"---------------------------------------------------------------
""           General Settings
"---------------------------------------------------------------

" Disable safewrite so that filewatchers can detect changes.
" Right now specifically for parceljs. Close after this feature is complete https://github.com/parcel-bundler/parcel/issues/221
set backupcopy=yes

set shell=/bin/zsh

set encoding=utf-8
"set showcmd							  																		" display incomplete commands
syntax enable
filetype plugin on

"" Spacing
set nowrap                          														" don't wrap lines
set tabstop=2 shiftwidth=2          														" a tab is two spaces (or set this to 4)
set backspace=indent,eol,start      														" backspace through everything in insert mode
set expandtab                                                   " use spaces, not tabs (optional)
set nojoinspaces                                                " Use one space, not two, after punctuation.

"" Navigation
" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline
set mouse=a																											" Enable use of the mouse for all modes
setlocal foldmethod=manual                                      " Enable code folding
" When editing a file, always jump to the last known cursor position.
" Don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim).
augroup vimrcEx
  autocmd!

  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
augroup END

"" Display
set number 																											" Display line numbers on the left
set ruler 																											" Display the cursor position on the last line of the screen or in the status line of a window
set laststatus=2																								" Always display the status line, even if only one window is displayed
set cmdheight=2																									" Set the command window height to 2 lines, to avoid many cases of having to 'press <Enter> to continue'
set textwidth=120                                               " Make it obvious where 120 characters is
set colorcolumn=+1                                              " Make it obvious where 120 characters is
let g:html_indent_tags = 'li\|p'                                " Treat <li> and <p> tags like the block tags they are
set splitbelow                                                  " Open new split panes to right and bottom, which feels more natural
set splitright                                                  " Open new split panes to right and bottom, which feels more natural

nnoremap <Left> :echoe "Use h"<CR>                              " Get off my lawn
nnoremap <Right> :echoe "Use l"<CR>                             " Get off my lawn
nnoremap <Up> :echoe "Use k"<CR>                                " Get off my lawn
nnoremap <Down> :echoe "Use j"<CR>                              " Get off my lawn

"" Searching
set hlsearch                            												" highlight matches
set incsearch                           												" incremental searching
set ignorecase                          												" searches are case insensitive...
set smartcase                           												" ... unless they contain at least one capital letter
nnoremap <silent> <F5> :nohl<CR><C-l>                          " <Ctrl-a> redraws the screen and removes any search highlighting.

"" Misc
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us  " automatically turn on spell-checking for Markdown file
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us  " automatically turn on spell-checking for Markdown file
set complete+=kspell                                            " Autocomplete with dictionary words when spell check is on
set clipboard=unnamedplus                                       " Use system clipboard

"---------------------------------------------------------------
""           Plugins
"---------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" Color schemes
Plug 'kristijanhusak/vim-hybrid-material'                      " hybrid material
" Plug 'joshdick/onedark.vim'                                    " onedark
" Plug 'NLKNguyen/papercolor-theme'                              " papercolor
" Plug 'gosukiwi/vim-atom-dark'

" Aesthetics
Plug 'vim-airline/vim-airline'                                  " A cooler status bar at the bottom
Plug 'vim-airline/vim-airline-themes'                           " A cooler status bar at the bottom
Plug 'airblade/vim-gitgutter'                                   " Show git changes in the gutter
Plug 'kien/rainbow_parentheses.vim'                             " Colourful parentheses
Plug 'ntpeters/vim-better-whitespace'                           " Highlight trailing whitespace
Plug 'valloric/MatchTagAlways'                                  " Highlight matching tags
Plug 'sheerun/vim-polyglot'                                     " Language support
Plug 'suan/vim-instant-markdown'                                " Instant markdown in the browser (also install global npm 'instant-markdown-d' package)
Plug 'tomtom/tcomment_vim'                                      " Easier commenting
Plug 'gorodinskiy/vim-coloresque'                               " A css/less/sass/html color preview
Plug 'scrooloose/syntastic'                                     " Syntax checking for various languages
Plug 'tpope/vim-eunuch'                                         " Vim sugar for the UNIX shell commands that need it the most
Plug 'Shougo/neocomplete.vim'                                   " As-you-type autocomplete
Plug 'Shougo/vimproc', {'do' : 'make'} | Plug 'Quramy/tsuquyomi' " Tsuquyomi (typescript plugin) depends on vimproc
Plug 'leafgarland/typescript-vim'                               " Syntax highlighting and compilation of typescript
Plug 'tpope/vim-fugitive'                                       " 'may very well be the best Git wrapper of all time'
Plug 'tomlion/vim-solidity'                                     " Syntax files for Solidity, the contract-oriented programming language for Ethereum

" General
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " General-purpose command-line fuzzy finder.
Plug 'scrooloose/nerdtree'                                      " View directory as a sidebar
Plug 'jistr/vim-nerdtree-tabs'                                  " Making NERDTree better
Plug 'Xuyuanp/nerdtree-git-plugin'                              " Making NERDTree play with GIT
Plug 'matze/vim-move'                                           " Move line(s) up and down
Plug 'tpope/vim-pathogen'
Plug 'chrisbra/recover.vim'

call plug#end()

"---------------------------------------------------------------
""           Plugin Configuration
"---------------------------------------------------------------

""" fzf
" export FZF_DEFAULT_COMMAND='ag -g ""'
" export FZF_DEFAULT_OPTS="--reverse --inline-info"
nnoremap <C-p> :FZF<CR>                                          " <Ctrl-p> initiates fuzzy-find in current directory

""" onedark
let g:onedark_termcolors=256

""" Tsuquyomi
set ballooneval                                                  " show tooltip
autocmd FileType typescript nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>
let g:tsuquyomi_disable_default_mappings = 1                     " disable default tsuquyomi keymappins

""" neocomplete
let g:neocomplete#enable_at_startup = 1                          " Enable on startup
let g:neocomplete#enable_smart_case = 1                          " Use smartcase
" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

""" Tsuquyomi + neocomplete
" make pathogen work
execute pathogen#infect()
" typescript omnicomplete
let g:tsuquyomi_use_dev_node_module=2
let g:tsuquyomi_tsserver_path=$NVM_BIN
autocmd FileType typescript set omnifunc=tsuquyomi#complete
" neocomplete start with a dot
let g:neocomplete#enable_at_startup = 1
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.typescript = '[^. *\t]\.\w*\|\h\w*::'
" neocomplete tab complete
inoremap <expr><tab>  pumvisible() ? "\<c-n>" :
      \ <sid>check_back_space() ? "\<tab>" :
      \ neocomplete#start_manual_complete()
function! s:check_back_space() "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

""" NERDTree
"autocmd vimenter * NERDTree                                     " show NERDTree on vim startup
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

""" gitNERDTree
let g:NerdTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "~",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"" Syntastic
let g:syntastic_ruby_checkers = ['rubocop']                     " Use MRI and Rubocop checkers for Ruby files
let g:syntastic_javascript_checkers = ['eslint']                " Use eslint for Javascript files

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": [],
        \ "passive_filetypes": ["ruby", "javascript", "typescript"] }

" nnoremap <leader>z :SyntasticCheck<CR>
" nnoremap <leader>c :SyntasticReset<CR>                          " Scan file again for syntax erors

"" move
let g:move_key_modifier = 'C'                                     " Change key binding for move to CTRL


" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"---------------------------------------------------------------
""             Display
"---------------------------------------------------------------

" set background=dark
" colorscheme onedark
set background=dark
colorscheme hybrid_material


" format xml  :%!xmllint --format -                               " part of the libxml2-utils package
" format json :%!python -m json.tool

" Search lines in all open vim buffers
function! s:line_handler(l)
  let keys = split(a:l, ':\t')
  exec 'buf' keys[0]
  exec keys[1]
  normal! ^zz
endfunction

function! s:buffer_lines()
  let res = []
  for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
    call extend(res, map(getbufline(b,0,"$"), 'b . ":\t" . (v:key + 1) . ":\t" . v:val '))
  endfor
  return res
endfunction

command! FZFLines call fzf#run({
\   'source':  <sid>buffer_lines(),
\   'sink':    function('<sid>line_handler'),
\   'options': '--extended --nth=3..',
\   'down':    '60%'
\})
